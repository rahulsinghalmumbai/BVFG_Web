@model List<BVFG_Web.Models.AdminModel.EditedMemberChange>
@{
    ViewData["Title"] = "Member Changes History";
    ViewData["SubTitle"] = "Member Changes History";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="history-container">
    <div class="filters-section">
        <button class="btn btn-secondary back-btn" onclick="goBack()">
            <i class="fas fa-arrow-left"></i> Back
        </button>
        <div class="search-box">
            <i class="fas fa-search"></i>
            <input type="text" id="searchInput" placeholder="Search by column name...">
        </div>
        <button class="btn btn-secondary" id="resetFilters">
            <i class="fas fa-redo"></i> Reset Filters
        </button>
    </div>

    <div class="table-container">
        <div class="table-responsive">
            <table class="history-table">
                <thead>
                    <tr>
                        <th class="sortable" data-column="columnName">
                            Column Name
                            <i class="fas fa-sort sort-icon"></i>
                        </th>
                        <th class="sortable" data-column="oldValue">
                            Old Value
                            <i class="fas fa-sort sort-icon"></i>
                        </th>
                        <th class="sortable" data-column="newValue">
                            New Value
                            <i class="fas fa-sort sort-icon"></i>
                        </th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="historyTableBody">
                    <!-- Data will be loaded here -->
                </tbody>
            </table>
        </div>
    </div>

    <div class="no-records" id="noRecords" style="@(Model == null || !Model.Any() ? "display: flex;" : "display: none;")">
        <div class="no-records-icon">
            <i class="fas fa-info-circle"></i>
        </div>
        <div class="no-records-content">
            <h3>No Records Found</h3>
            <p>@(ViewBag.ErrorMessage ?? "No member changes data available")</p>
        </div>
    </div>

    <div class="pagination-container">
        <div class="pagination-info" id="paginationInfo"></div>
        <div class="pagination-controls">
            <button class="btn btn-secondary" id="prevPage" disabled>
                <i class="fas fa-chevron-left"></i> Previous
            </button>
            <div class="page-numbers" id="pageNumbers">
                <span id="currentPageNumber">1</span>
            </div>
            <button class="btn btn-secondary" id="nextPage">
                Next <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>
</div>

<style>
    /* Main Container */
    .history-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        padding: 30px;
        margin-top: 20px;
        min-height: calc(100vh - 200px);
    }

  

    .header-content {
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .back-btn {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 10px 15px;
        border: 1px solid #e2e8f0;
        background: white;
        color: #666;
        border-radius: 8px;
        text-decoration: none;
        transition: all 0.3s ease;
    }

        .back-btn:hover {
            background-color: #f8fafc;
            border-color: #00BCD4;
            color: #00BCD4;
        }

    .title-section h2 {
        margin: 0;
        color: #2d3748;
        font-size: 24px;
        font-weight: 600;
    }

    .title-section p {
        margin: 4px 0 0 0;
        color: #718096;
        font-size: 14px;
    }

    /* Filters Section */
    .filters-section {
        display: flex;
        gap: 20px;
        margin-bottom: 25px;
        align-items: center;
        flex-wrap: wrap;
    }

    .search-box {
        position: relative;
        flex: 1;
        min-width: 250px;
        max-width: 400px;
    }

        .search-box i {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #a0aec0;
        }

        .search-box input {
            width: 100%;
            padding: 12px 15px 12px 45px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

            .search-box input:focus {
                border-color: #00BCD4;
                box-shadow: 0 0 0 3px rgba(0,188,212,0.1);
                outline: none;
            }

    /* Table Container */
    .table-container {
        background: #f8fafc;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
    }

    .table-responsive {
        overflow-x: auto;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .history-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
    }

        .history-table th {
            background: linear-gradient(135deg, #00BCD4 0%, #00BCD4 100%);
            color: white;
            padding: 15px 12px;
            text-align: left;
            font-weight: 600;
            font-size: 14px;
            position: relative;
        }

            .history-table th.sortable {
                cursor: pointer;
                user-select: none;
                transition: all 0.3s ease;
            }

                .history-table th.sortable:hover {
                    background: linear-gradient(135deg, #00BCD4 0%,#00BCD4 100%);
                }

    .sort-icon {
        margin-left: 8px;
        opacity: 0.6;
        font-size: 12px;
    }

    .history-table th.sort-asc .sort-icon::before {
        content: "\f0de";
        opacity: 1;
    }

    .history-table th.sort-desc .sort-icon::before {
        content: "\f0dd";
        opacity: 1;
    }

    .history-table td {
        padding: 15px 12px;
        border-bottom: 1px solid #e2e8f0;
        vertical-align: middle;
        font-size: 14px;
    }

    .history-table tr:hover {
        background-color: #f7fafc;
    }

   

    .old-value {
        color: #c53030;
    }

    .new-value {
        color: #276749;
    }

    .empty-value {
        color: #a0aec0;
        font-style: italic;
    }

    /* Action Buttons */
    .action-buttons-cell {
        display: flex;
        gap: 8px;
    }

    .action-btn {
        width: 32px;
        height: 32px;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: none;
        border: 1px solid #e2e8f0;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .action-btn:hover {
            background-color: #f7fafc;
        }

        .action-btn.info {
            color: #3182ce;
            border-color: #3182ce;
        }

    /* No Records */
    .no-records {
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px 20px;
        text-align: center;
    }

    .no-records-icon {
        font-size: 64px;
        color: #a0aec0;
        margin-bottom: 20px;
    }

    .no-records-content h3 {
        margin: 0 0 10px 0;
        color: #4a5568;
        font-size: 20px;
    }

    .no-records-content p {
        margin: 0;
        color: #718096;
        font-size: 16px;
    }

    /* Pagination */
    .pagination-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 20px;
        flex-wrap: wrap;
        gap: 15px;
    }

    .pagination-info {
        color: #718096;
        font-size: 14px;
    }

    .pagination-controls {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .page-numbers {
        display: flex;
        gap: 5px;
    }

    #currentPageNumber {
        padding: 8px 15px;
        font-weight: 500;
    }

    .page-btn {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: white;
        border: 2px solid #e2e8f0;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 500;
    }

        .page-btn:hover {
            border-color: #00BCD4;
            color: #00BCD4;
        }

        .page-btn.active {
            background: #00BCD4;
            color: white;
            border-color: #00BCD4;
        }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .history-container {
            padding: 20px 15px;
        }

    

        .header-content {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }

        .filters-section {
            flex-direction: column;
            align-items: stretch;
        }

        .search-box {
            max-width: none;
        }

        .history-table th,
        .history-table td {
            padding: 10px 8px;
            font-size: 13px;
        }

        

        .pagination-container {
            flex-direction: column;
            align-items: center;
        }
    }

    @@media (max-width: 480px) {
        .history-table {
            font-size: 12px;
        }

            .history-table th,
            .history-table td {
                padding: 8px 6px;
            }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Get data from server-side model
        const historyData = @Html.Raw(Json.Serialize(Model ?? new List<BVFG_Web.Models.AdminModel.EditedMemberChange>()));

        // DOM elements
        const tableBody = document.getElementById('historyTableBody');
        const noRecords = document.getElementById('noRecords');
        const searchInput = document.getElementById('searchInput');
        const resetFilters = document.getElementById('resetFilters');
        const paginationInfo = document.getElementById('paginationInfo');
        const prevPage = document.getElementById('prevPage');
        const nextPage = document.getElementById('nextPage');
        const currentPageNumber = document.getElementById('currentPageNumber');

        // Variables
        let currentPage = 1;
        const rowsPerPage = 5; // Changed to show 5 records per page
        let filteredData = [...historyData];
        let sortColumn = '';
        let sortDirection = 'asc';

        // Initialize the page
        function initPage() {
            if (historyData && historyData.length > 0) {
                renderTable();
                renderPagination();
                attachSortListeners();
            } else {
                showNoRecords();
            }
        }

        // Attach sort listeners
        function attachSortListeners() {
            document.querySelectorAll('.sortable').forEach(header => {
                header.addEventListener('click', function() {
                    const column = this.dataset.column;

                    if (sortColumn === column) {
                        sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
                    } else {
                        sortColumn = column;
                        sortDirection = 'asc';
                    }

                    // Update sort icons
                    document.querySelectorAll('.sortable').forEach(h => {
                        h.classList.remove('sort-asc', 'sort-desc');
                    });
                    this.classList.add('sort-' + sortDirection);

                    sortData();
                    currentPage = 1;
                    renderTable();
                    renderPagination();
                });
            });
        }

        // Sort data
        function sortData() {
            filteredData.sort((a, b) => {
                let aValue = '';
                let bValue = '';

                switch(sortColumn) {
                    case 'columnName':
                        aValue = (a.ColumnName || a.columnName || '').toLowerCase();
                        bValue = (b.ColumnName || b.columnName || '').toLowerCase();
                        break;
                    case 'oldValue':
                        aValue = (a.OldValue || a.oldValue || '').toLowerCase();
                        bValue = (b.OldValue || b.oldValue || '').toLowerCase();
                        break;
                    case 'newValue':
                        aValue = (a.NewValue || a.newValue || '').toLowerCase();
                        bValue = (b.NewValue || b.newValue || '').toLowerCase();
                        break;
                }

                if (sortDirection === 'asc') {
                    return aValue.localeCompare(bValue);
                } else {
                    return bValue.localeCompare(aValue);
                }
            });
        }

        // Render table
        function renderTable() {
            tableBody.innerHTML = '';

            const startIndex = (currentPage - 1) * rowsPerPage;
            const endIndex = startIndex + rowsPerPage;
            const paginatedData = filteredData.slice(startIndex, endIndex);

            if (paginatedData.length === 0) {
                showNoRecords();
                return;
            }

            noRecords.style.display = 'none';
            document.querySelector('.table-container').style.display = 'block';

            paginatedData.forEach((item, index) => {
                const globalIndex = startIndex + index;
                const row = document.createElement('tr');

                const columnName = item.ColumnName || item.columnName || 'Unknown';
                const oldValue = item.OldValue || item.oldValue || '';
                const newValue = item.NewValue || item.newValue || '';

                row.innerHTML = `
                    <td>
                        <strong>${columnName}</strong>
                    </td>
                    <td>
                    <span>${columnName || 'Empty'}</span>
                        
                    </td>
                    <td>
                    <span>${newValue || 'Empty'}</span>
                    </td>
                    <td>
                        <div class="action-buttons-cell">
                            <button class="action-btn info" title="View Details" onclick="viewDetails('${columnName}', '${oldValue}', '${newValue}')">
                                <i class="fas fa-info"></i>
                            </button>
                        </div>
                    </td>
                `;

                tableBody.appendChild(row);
            });

            updatePaginationInfo();
        }

        // Filter data
        function filterData() {
            const searchTerm = searchInput.value.toLowerCase();

            filteredData = historyData.filter(item => {
                const columnName = (item.ColumnName || item.columnName || '').toLowerCase();
                const oldValue = (item.OldValue || item.oldValue || '').toLowerCase();
                const newValue = (item.NewValue || item.newValue || '').toLowerCase();

                return columnName.includes(searchTerm) ||
                       oldValue.includes(searchTerm) ||
                       newValue.includes(searchTerm);
            });

            // Re-apply sorting if active
            if (sortColumn) {
                sortData();
            }

            currentPage = 1;
            renderTable();
            renderPagination();
        }

        // Render pagination
        function renderPagination() {
            const totalPages = Math.ceil(filteredData.length / rowsPerPage);

            if (totalPages <= 1) {
                document.querySelector('.pagination-container').style.display = 'none';
                return;
            }

            document.querySelector('.pagination-container').style.display = 'flex';

            prevPage.disabled = currentPage === 1;
            nextPage.disabled = currentPage === totalPages;

            // Update current page number
            currentPageNumber.textContent = currentPage;
        }

        function updatePaginationInfo() {
            const startItem = (currentPage - 1) * rowsPerPage + 1;
            const endItem = Math.min(currentPage * rowsPerPage, filteredData.length);
            paginationInfo.textContent = `Showing ${startItem}-${endItem} of ${filteredData.length} entries`;
        }

        // Show no records message
        function showNoRecords() {
            noRecords.style.display = 'flex';
            document.querySelector('.table-container').style.display = 'none';
            document.querySelector('.pagination-container').style.display = 'none';
        }

        // Event listeners
        searchInput.addEventListener('input', debounce(filterData, 300));
        resetFilters.addEventListener('click', resetAllFilters);
        prevPage.addEventListener('click', goToPrevPage);
        nextPage.addEventListener('click', goToNextPage);

        // Debounce function for search
        function debounce(func, wait) {
            let timeout;
            return function() {
                const context = this, args = arguments;
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(context, args), wait);
            };
        }

        // Reset all filters
        function resetAllFilters() {
            searchInput.value = '';
            sortColumn = '';
            sortDirection = 'asc';

            document.querySelectorAll('.sortable').forEach(h => {
                h.classList.remove('sort-asc', 'sort-desc');
            });

            filteredData = [...historyData];
            currentPage = 1;
            renderTable();
            renderPagination();
        }

        // Go to previous page
        function goToPrevPage() {
            if (currentPage > 1) {
                currentPage--;
                renderTable();
                renderPagination();
            }
        }

        // Go to next page
        function goToNextPage() {
            const totalPages = Math.ceil(filteredData.length / rowsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                renderTable();
                renderPagination();
            }
        }

        // Initialize the page
        initPage();
    });

    // Global functions
    function goBack() {
        window.history.back();
    }

    function viewDetails(columnName, oldValue, newValue) {
        alert(`Column: ${columnName}\n\nOld Value: ${oldValue || 'Empty'}\nNew Value: ${newValue || 'Empty'}`);
    }
</script>